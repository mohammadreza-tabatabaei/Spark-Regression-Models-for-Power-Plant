# -*- coding: utf-8 -*-
"""Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vlaGxOu87rtoGPREC2w5dE9Ld8dq3o7w
"""

from pyspark.sql import SparkSession
from pyspark.ml.regression import LinearRegression
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.regression import DecisionTreeRegressor
from pyspark.ml.evaluation import RegressionEvaluator
from pyspark.ml.regression import GBTRegressor

# Initialize Spark session
spark = SparkSession.builder.appName("PowerPlantAnalysis").getOrCreate()

# Read the CSV file
pp_df = spark.read.csv("/content/power-plant.csv", header=True, inferSchema=True)

VectorAssembler=VectorAssembler(inputCols=["AT","V","AP","RH"],outputCol="features")

vpp_df=VectorAssembler.transform(pp_df)

vpp_df.take(1)

lr=LinearRegression(featuresCol="features",labelCol="PE")

lr_model=lr.fit(vpp_df)

lr_model.coefficients

lr_model.intercept

lr_model.summary.rootMeanSquaredError

splits=vpp_df.randomSplit([0.7,0.3])

train_df=splits[0]
test_df=splits[1]

train_df.count()

test_df.count()

dt=DecisionTreeRegressor(featuresCol="features",labelCol="PE")

dt_model=dt.fit(train_df)

dt_prediction=dt_model.transform(test_df)

dt_evaluator = RegressionEvaluator(labelCol="PE", predictionCol="prediction", metricName="rmse")

rms=dt_evaluator.evaluate(dt_prediction)

rms

gbt=GBTRegressor(featuresCol="features",labelCol="PE")

gbt_model=gbt.fit(train_df)

gbt_prediction=gbt_model.transform(test_df)

gbt_evaluator=RegressionEvaluator(labelCol="PE",predictionCol="prediction",metricName="rmse")

gbt_rms=gbt_evaluator.evaluate(gbt_prediction)

gbt_rms